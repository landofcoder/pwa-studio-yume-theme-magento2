"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var apollo_link_1 = require("apollo-link");
var toRequestKey = function (operation) {
    return operation.operationName;
};
/**
 * An Apollo link that enqueues mutations so that they cannot fire in parallel.
 *
 * To skip the queue pass `{ context: { skipQueue: true } }` to your mutation.
 */
var MutationQueueLink = /** @class */ (function (_super) {
    __extends(MutationQueueLink, _super);
    /**
     * @param {Boolean} debug - set to true to enable logging
     */
    function MutationQueueLink(_a) {
        var _b = (_a === void 0 ? {} : _a).debug, debug = _b === void 0 ? false : _b;
        var _this = _super.call(this) || this;
        _this.opQueue = [];
        _this.inProcess = false;
        _this.debug = false;
        _this.debug = debug;
        return _this;
    }
    MutationQueueLink.prototype.log = function (message) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (this.debug) {
            console.log.apply(console, __spreadArrays([message], rest));
        }
    };
    MutationQueueLink.prototype.processOperation = function (entry) {
        var _this = this;
        var operation = entry.operation, forward = entry.forward, observer = entry.observer;
        this.inProcess = true;
        this.log("[PROCESSING] -", toRequestKey(operation));
        forward(operation).subscribe({
            next: function (result) {
                _this.inProcess = false;
                observer.next(result);
                _this.log("[NEXT] -", toRequestKey(operation));
                // If there are more operations, process them.
                if (_this.opQueue.length) {
                    _this.processOperation(_this.opQueue.shift());
                }
            },
            error: function (error) {
                _this.inProcess = false;
                observer.error(error);
                _this.log("[ERROR] -", toRequestKey(operation), error);
                // If there are more operations, process them.
                if (_this.opQueue.length) {
                    _this.processOperation(_this.opQueue.shift());
                }
            },
            complete: observer.complete.bind(observer)
        });
    };
    MutationQueueLink.prototype.cancelOperation = function (entry) {
        this.opQueue = this.opQueue.filter(function (e) { return e !== entry; });
    };
    MutationQueueLink.prototype.enqueue = function (entry) {
        this.log("[ENQUEUE] -", toRequestKey(entry.operation));
        this.opQueue.push(entry);
    };
    MutationQueueLink.prototype.request = function (operation, forward) {
        var _this = this;
        // Enqueue all mutations unless manually skipped.
        if (isMutation(operation) && !operation.getContext().skipQueue) {
            return new apollo_link_1.Observable(function (observer) {
                var operationEntry = { operation: operation, forward: forward, observer: observer };
                if (!_this.inProcess) {
                    _this.processOperation(operationEntry);
                }
                else {
                    _this.enqueue(operationEntry);
                }
                return function () { return _this.cancelOperation(operationEntry); };
            });
        }
        else {
            return forward(operation);
        }
    };
    return MutationQueueLink;
}(apollo_link_1.ApolloLink));
exports["default"] = MutationQueueLink;
function isMutation(operation) {
    return operation.query.definitions.some(function (definition) {
        return definition.kind === "OperationDefinition" &&
            definition.operation === "mutation";
    });
}
//# sourceMappingURL=MutationQueueLink.js.map